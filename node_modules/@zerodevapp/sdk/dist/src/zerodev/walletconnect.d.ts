import LegacySignClient from '@walletconnect/client';
import { SignClientTypes } from '@walletconnect/types';
import { Signer } from 'ethers';
export interface WalletConnectHooks {
    onSessionRequest(request: any, approve: () => void, reject: () => void): void;
    onSendTransaction(request: any, session: any, approve: () => void, reject: () => void): void;
    onSignMessage(request: any, session: any, approve: () => void, reject: () => void): void;
    onSignTypedData(request: any, session: any, approve: () => void, reject: () => void): void;
    disconnect?(): void;
}
export declare const setupWalletConnect: (signer: Signer, hooks: WalletConnectHooks) => WalletConnect;
export declare class WalletConnect {
    signer: Signer;
    hooks: WalletConnectHooks;
    client?: LegacySignClient;
    address?: string;
    chainId?: number;
    constructor(signer: Signer, hooks: WalletConnectHooks);
    getAddress(): Promise<string>;
    getChainId(): Promise<number>;
    pair(uri: string): void;
    onCallRequest(payload: {
        id: number;
        method: string;
        params: any[];
    }): Promise<void>;
    approveEIP155Request(requestEvent: SignClientTypes.EventArguments['session_request']): Promise<import("@json-rpc-tools/utils").JsonRpcResult<any> | undefined>;
    rejectEIP155Request(request: SignClientTypes.EventArguments['session_request']): import("@json-rpc-tools/utils").JsonRpcError;
}
/**
 * Converts hex to utf8 string if it is valid bytes
 */
export declare function convertHexToUtf8(value: string): string;
/**
 * Gets message from various signing request methods by filtering out
 * a value that is not an address (thus is a message).
 * If it is a hex string, it gets converted to utf8 string
 */
export declare function getSignParamsMessage(params: string[]): string;
/**
 * Gets data from various signTypedData request methods by filtering out
 * a value that is not an address (thus is data).
 * If data is a string convert it to object
 */
export declare function getSignTypedDataParamsData(params: string[]): any;
