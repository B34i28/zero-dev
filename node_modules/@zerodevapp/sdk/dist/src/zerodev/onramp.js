"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onramp = void 0;
// @ts-ignore
const transak_sdk_1 = __importDefault(require("@transak/transak-sdk"));
const constants_1 = require("./constants");
// Trigger an onramp flow for the given user
async function onramp(options) {
    const chainId = await options.signer.getChainId();
    const transakNetworkName = constants_1.CHAIN_ID_TO_TRANSAK_NAME[chainId];
    if (!transakNetworkName) {
        throw new Error(`Unsupported network ID ${chainId}`);
    }
    const transak = new transak_sdk_1.default({
        apiKey: options.staging ? constants_1.TRANSAK_STAGING_API_KEY : constants_1.TRANSAK_PRODUCTION_API_KEY,
        widgetHeight: '625px',
        widgetWidth: '500px',
        environment: options.staging ? 'STAGING' : 'PRODUCTION',
        walletAddress: await options.signer.getAddress(),
        defaultCryptoCurrency: options.defaultToken || 'ETH',
        userData: options.userInfo,
        network: transakNetworkName,
    });
    await transak.init();
}
exports.onramp = onramp;
//# sourceMappingURL=onramp.js.map