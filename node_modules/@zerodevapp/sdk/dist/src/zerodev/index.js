"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSigner = exports.getProvider = exports.enableModule = exports.WalletConnect = exports.setupWalletConnect = exports.onramp = exports.execBatch = exports.calcPreVerificationGas = exports.DeterministicDeployer = exports.ERC4337EthersSigner = exports.ERC4337EthersProvider = void 0;
require("@ethersproject/shims");
const buffer_1 = require("buffer");
global.Buffer = buffer_1.Buffer;
const ethers_1 = require("ethers");
const __1 = require("../");
const utils_1 = require("ethers/lib/utils");
const utils_2 = require("./utils");
const errors_1 = require("./errors");
const api = __importStar(require("./api"));
const constants = __importStar(require("./constants"));
var __2 = require("../");
Object.defineProperty(exports, "ERC4337EthersProvider", { enumerable: true, get: function () { return __2.ERC4337EthersProvider; } });
Object.defineProperty(exports, "ERC4337EthersSigner", { enumerable: true, get: function () { return __2.ERC4337EthersSigner; } });
Object.defineProperty(exports, "DeterministicDeployer", { enumerable: true, get: function () { return __2.DeterministicDeployer; } });
Object.defineProperty(exports, "calcPreVerificationGas", { enumerable: true, get: function () { return __2.calcPreVerificationGas; } });
Object.defineProperty(exports, "execBatch", { enumerable: true, get: function () { return __2.execBatch; } });
var onramp_1 = require("./onramp");
Object.defineProperty(exports, "onramp", { enumerable: true, get: function () { return onramp_1.onramp; } });
var walletconnect_1 = require("./walletconnect");
Object.defineProperty(exports, "setupWalletConnect", { enumerable: true, get: function () { return walletconnect_1.setupWalletConnect; } });
Object.defineProperty(exports, "WalletConnect", { enumerable: true, get: function () { return walletconnect_1.WalletConnect; } });
var module_1 = require("../module");
Object.defineProperty(exports, "enableModule", { enumerable: true, get: function () { return module_1.enableModule; } });
/*
 * @param {SignerParams} You may provide a private key, identity token, or Web3 provider
 * @param {AdvancedParams} Allows you to specify custom parts of the Account Abstraction stack
 * @returns {ERC4337EthersProvider} object that can be used as a provider
 */
async function getProvider(params, advancedParams) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const backendUrl = (_a = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.backendUrl) !== null && _a !== void 0 ? _a : constants.BACKEND_URL;
    const chainId = await api.getChainId(params.projectId, backendUrl);
    const rpcUrl = (_b = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.rpcUrl) !== null && _b !== void 0 ? _b : (0, utils_2.getRpcUrl)(chainId);
    const { provider, signer } = await extractProviderAndSigner(params, rpcUrl, backendUrl);
    const paymasterAddress = (_d = (_c = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.contractAddresses) === null || _c === void 0 ? void 0 : _c.paymaster) !== null && _d !== void 0 ? _d : constants.PAYMASTER_ADDRESS;
    const entrypointAddress = (_f = (_e = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.contractAddresses) === null || _e === void 0 ? void 0 : _e.entrypoint) !== null && _f !== void 0 ? _f : constants.ENTRYPOINT_ADDRESS;
    const accountFactoryAddress = (_h = (_g = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.contractAddresses) === null || _g === void 0 ? void 0 : _g.walletFactory) !== null && _h !== void 0 ? _h : constants.ACCOUNT_FACTORY_ADDRESS;
    const paymaster = new ethers_1.ethers.Contract(paymasterAddress, constants.PAYMASTER_ABI, signer);
    const bundlerUrl = (_j = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.bundlerUrl) !== null && _j !== void 0 ? _j : constants.BUNDLER_URL[chainId];
    const paymasterUrl = (_k = advancedParams === null || advancedParams === void 0 ? void 0 : advancedParams.paymasterUrl) !== null && _k !== void 0 ? _k : constants.PAYMASTER_URL;
    const aaConfig = {
        chainId: chainId,
        entryPointAddress: entrypointAddress,
        bundlerUrl: bundlerUrl,
        paymasterAPI: new VerifyingPaymasterAPI(params.projectId, paymaster, backendUrl, paymasterUrl),
        accountFactoryAddress: accountFactoryAddress,
        hooks: params.hooks,
    };
    const aaProvider = await (0, __1.wrapProvider)(provider, aaConfig, signer);
    return aaProvider;
}
exports.getProvider = getProvider;
/*
 * @param {SignerParams} You may provide a private key, identity token, or Web3 provider
 * @param {AdvancedParams} Allows you to specify custom parts of the Account Abstraction stack
 * @returns {Signer} object that can be used as a signer
 */
async function getSigner(params, advancedParams) {
    const aaProvider = await getProvider(params, advancedParams);
    const aaSigner = aaProvider.getSigner();
    return aaSigner;
}
exports.getSigner = getSigner;
const extractProviderAndSigner = async (params, rpcUrl, backendUrl) => {
    let provider, signer;
    if (params.privateKey) {
        provider = new ethers_1.ethers.providers.JsonRpcProvider(rpcUrl);
        signer = new ethers_1.ethers.Wallet(params.privateKey, provider);
    }
    else if (params.web3Provider) {
        provider = new ethers_1.ethers.providers.Web3Provider(params.web3Provider);
        signer = provider.getSigner();
    }
    else if (params.identity && params.token) {
        const privateKey = await api.getPrivateKeyByToken(params.projectId, params.identity, params.token, backendUrl);
        provider = new ethers_1.ethers.providers.JsonRpcProvider(rpcUrl);
        signer = new ethers_1.ethers.Wallet(privateKey, provider);
    }
    else {
        throw errors_1.ErrNoIdentifierProvided;
    }
    return { provider, signer };
};
class VerifyingPaymasterAPI extends __1.PaymasterAPI {
    constructor(projectId, paymaster, backendUrl, paymasterUrl) {
        super();
        this.projectId = projectId;
        this.paymaster = paymaster;
        this.backendUrl = backendUrl;
        this.paymasterUrl = paymasterUrl;
        this.projectId = projectId;
        this.paymaster = paymaster;
        this.backendUrl = backendUrl;
        this.paymasterUrl = paymasterUrl;
    }
    async getPaymasterAndData(userOp) {
        const resolvedUserOp = await (0, utils_1.resolveProperties)(userOp);
        const hexifiedUserOp = (0, utils_2.hexifyUserOp)(resolvedUserOp);
        const signature = await api.signUserOp(this.projectId, hexifiedUserOp, this.paymasterUrl);
        if (!signature) {
            throw errors_1.ErrTransactionFailedGasChecks;
        }
        return ethers_1.ethers.utils.hexConcat([this.paymaster.address, signature]);
    }
}
//# sourceMappingURL=index.js.map