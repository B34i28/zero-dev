import '@ethersproject/shims';
import { Signer } from 'ethers';
import { Hooks } from './ClientConfig';
import { ZeroDevSigner } from './ZeroDevSigner';
import { ZeroDevProvider } from './ZeroDevProvider';
import { AccountImplementation } from './accounts';
import { BaseAccountAPI, BaseApiParams } from './BaseAccountAPI';
import { SupportedGasToken } from './types';
import { JsonRpcProvider } from '@ethersproject/providers';
export { ZeroDevSigner, AssetTransfer, AssetType } from './ZeroDevSigner';
export { ZeroDevProvider } from './ZeroDevProvider';
export { UserOperationReceipt } from './HttpRpcClient';
export { getPrivateKeyOwner, getRPCProviderOwner } from './owner';
export { createSessionKey, createSessionKeySigner, revokeSessionKey } from './session';
export type AccountParams = {
    projectId: string;
    owner: Signer;
    index?: number;
    rpcProvider?: JsonRpcProvider;
    bundlerUrl?: string;
    hooks?: Hooks;
    address?: string;
    implementation?: AccountImplementation<BaseAccountAPI, BaseApiParams>;
    skipFetchSetup?: boolean;
    gasToken?: SupportedGasToken;
    useWebsocketProvider?: boolean;
};
export declare function getZeroDevProvider(params: AccountParams): Promise<ZeroDevProvider>;
export declare function getZeroDevSigner(params: AccountParams): Promise<ZeroDevSigner>;
export declare function isZeroDevSigner(signer: any): Promise<boolean>;
export declare function asZeroDevSigner(signer: Signer): ZeroDevSigner;
export declare function initiateProject(projectIds: string[]): Promise<void>;
export declare const getProjectsConfiguration: (projectIds: string[], backendUrl?: string | undefined) => Promise<import("./types").ProjectConfiguration>;
